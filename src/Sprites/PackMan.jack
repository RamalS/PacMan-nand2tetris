class PackMan
{
    field int lastKey, direction, nextDirection, location, lastLocation, gridIndex;
    field bool updateSprite;
    field Array grid;
    field AnimationManager am;

    constructor PackMan new(int x, int y, Array mapGrid)
    {
        let lastKey = 0;
        let direction = 0;
        let nextDirection = 0;
        let updateSprite = true;
        let grid = mapGrid;
        let am = AnimationManager.new(4);
        let location = ScreenManager.getLocation(x, y);
        let gridIndex = y * 32 + x;

        do loadAnimations();

        return this;
    }

    method void loadAnimations()
    {
        var Animation animation;

        let animation = Animation.new(2);
        do animation.add(PackManAsset.mouthOpenLeft());
        do animation.add(PackManAsset.mouthClosed());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PackManAsset.mouthOpenRight());
        do animation.add(PackManAsset.mouthClosed());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PackManAsset.mouthOpenUp());
        do animation.add(PackManAsset.mouthClosed());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PackManAsset.mouthOpenDown());
        do animation.add(PackManAsset.mouthClosed());
        do am.add(animation);

        do am.set(Constants.packManRight());

        return;
    }

    // promjeni da su prva 3 prazno, dot i ability
    method bool checkCollisionUp()    { if (grid[gridIndex - 32] < 3) {return true;} else {return false;}}
    method bool checkCollisionDown()  { if (grid[gridIndex + 32] < 3) {return true;} else {return false;}}
    method bool checkCollisionLeft()  { if (grid[gridIndex - 1] < 3)  {return true;} else {return false;}}
    method bool checkCollisionRight() { if (grid[gridIndex + 1] < 3)  {return true;} else {return false;}}

    method void moveInit()
    {
        let updateSprite = true;
        let lastLocation = location;

        return;
    }

    method void moveStop()
    {
        let direction = 0;
        let updateSprite = false;

        return;
    }

    method void moveRight()
    {
        if (checkCollisionRight())
        {
            do moveInit();
            let location = location + 1;
            let gridIndex = gridIndex + 1;
            do am.set(Constants.packManRight());
        }
        else { do moveStop(); }

        return;
    }

    method void moveLeft()
    {
        if (checkCollisionLeft())
        {
            do moveInit();
            let location = location - 1;
            let gridIndex = gridIndex - 1;
            do am.set(Constants.packManLeft());
        }
        else { do moveStop(); }

        return;
    }

    method void moveUp()
    {
        if (checkCollisionUp())
        {
            do moveInit();
            let location = location - 512;
            let gridIndex = gridIndex - 32;
            do am.set(Constants.packManUp());
        }
        else { do moveStop(); }
        
        return;
    }

    method void moveDown()
    {
        if (checkCollisionDown())
        {
            do moveInit();
            let location = location + 512;
            let gridIndex = gridIndex + 32;
            do am.set(Constants.packManDown());
        }
        else { do moveStop(); }
        
        return;
    }

    method void input()
    {
        var int kybrd;
        
        let kybrd = Keyboard.keyPressed();
        //do Logger.logInt(kybrd); 

        if ((kybrd = 130) & ~(lastKey = kybrd))
        {
            let nextDirection = -1;
            let lastKey = kybrd;   
        } 
        else {if (kybrd = 132 & ~(lastKey = kybrd))
        {
            let nextDirection = 1;
            let lastKey = kybrd;   
        }
        else {if ((kybrd = 131) & ~(lastKey = kybrd))
        {
            let nextDirection = -2;
            let lastKey = kybrd;   
        } 
        else {if (kybrd = 133 & ~(lastKey = kybrd))
        {
            let nextDirection = 2;
            let lastKey = kybrd;   
        }
        else {if (kybrd = 0 & ~(lastKey = kybrd))
        {
            let lastKey = kybrd;
        }}}}}
          
        return;
    }

    method void move()
    {
        if (~(direction = nextDirection))
        {
            if ((nextDirection = 1  & checkCollisionRight()) | 
                (nextDirection = -1 & checkCollisionLeft())  |
                (nextDirection = 2  & checkCollisionDown())  |
                (nextDirection = -2 & checkCollisionUp()))
            {
                let direction = nextDirection;
            }
        }
        
        if (direction = 1)
        {
            do moveRight();
        }
        else {if (direction = -1)
        {
            do moveLeft();
        }
        else {if (direction = 2)
        {
            do moveDown();
        }
        else {if (direction = -2)
        {
            do moveUp();
        }}}}

        return;
    }

    method void draw()
    {
        if (lastLocation > Constants.getScreen() & ~(location = lastLocation))
        {
            //do Logger.logInt(lastLocation);
            do ScreenManager.clearBlock(lastLocation);
        }

        if (updateSprite)
        {
            do am.drawNext(location);
        } 

        return; 
    }
}
