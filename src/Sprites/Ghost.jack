class Ghost
{
    field int location, lastLocation, homeLocation, gridIndex, lastIndex;
    field int anUp, anLeft, anDown, anRight, anFrightened, anDead;
    field bool dead, reseted;
    field AnimationManager am;
    field Vector2 position, defaultPosition, homePosition;

    constructor Ghost new(int x, int y, AnimationManager animationManager)
    {
        let lastIndex = 0;
        let dead = false;
        let reseted = false;
        let am = animationManager;
        let location = ScreenManager.getLocation(x, y);
        let gridIndex = y * 32 + x;
        let homeLocation = gridIndex;
        let position = Vector2.new(x, y);
        let defaultPosition = Vector2.new(x, y);
        let homePosition  = Vector2.new(15, 8);

        return this;
    }

    method void reset()
    {
        var int x, y;

        let x = defaultPosition.getX();
        let y = defaultPosition.getY();

        let lastIndex = 0;
        let dead = false;
        let reseted = false;
        let location = ScreenManager.getLocation(x, y);
        let gridIndex = y * 32 + x;
        do position.set(defaultPosition);
        let homeLocation = gridIndex;

        return;
    }

    method void dispose()
    {
      do Memory.deAlloc(this);
      
      return;
    }

    method bool checkCollisionUp()    { if (Game.grid(gridIndex - 32) < 7) {return true;} else {return false;}}
    method bool checkCollisionDown()  { if (Game.grid(gridIndex + 32) < 7) {return true;} else {return false;}}
    method bool checkCollisionLeft()  { if (Game.grid(gridIndex - 1) < 7)  {return true;} else {return false;}}
    method bool checkCollisionRight() { if (Game.grid(gridIndex + 1) < 7)  {return true;} else {return false;}}

    method int getLocation() { return location; }
    method int getLastLocation() { return lastLocation; }
    method int getGridIndex() { return gridIndex; }
    method int getLastIndex() { return lastIndex;}
    method int getAM() { return am; }

    method void bindAnimations(int _anUp, int _anLeft, int _anDown, int _anRight, int _anFrightened, int _anDead)
    {
        let anUp = _anUp;
        let anLeft = _anLeft;
        let anDown = _anDown;
        let anRight = _anRight;
        let anFrightened = _anFrightened;
        let anDead = _anDead;
        
        return;
    }

    method void checkIntersect()
    {
        if ((gridIndex = Game.pacManGridIndex()) & Game.isFrightened())
        { 
            let dead = true; 
            do Game.increaseScore(gridIndex + 1, 10);
        }
        else {if (~Game.isFrightened() & dead & gridIndex = homeLocation)
        { 
            let dead = false; 
        }
        else {if ((gridIndex = Game.pacManGridIndex()))
        {
            do Game.decHP();
        }}}
        return;
    }

    method bool isDead()
    {
        return dead;
    }

    method void isHome()
    {
        if (gridIndex = homeLocation)
            { let dead = false; }
        return;
    }

    method bool isReseted()
    {
        return reseted;
    }

    method void setReseted(int res)
    {
        let reseted = res;

        return;
    }

    method void moveInit()
    {
        let lastLocation = location;
        let lastIndex = gridIndex;

        return;
    }

    method void moveRight(int animation)
    {
        do moveInit();
        let location = location + 1;
        let gridIndex = gridIndex + 1;
        do position.incX();
        do am.set(animation);

        return;
    }

    method void moveLeft(int animation)
    {
        do moveInit();
        let location = location - 1;
        let gridIndex = gridIndex - 1;
        do position.decX();
        do am.set(animation);

        return;
    }

    method void moveUp(int animation)
    {
        do moveInit();
        let location = location - 512;
        let gridIndex = gridIndex - 32;
        do position.decY();
        do am.set(animation);

        return;
    }

    method void moveDown(int animation)
    {
        do moveInit();
        let location = location + 512;
        let gridIndex = gridIndex + 32;
        do position.incY();
        do am.set(animation);

        return;
    }

    method void resetPosition(int animation)
    {
        do moveInit();
        let reseted = true;
        do position.set(defaultPosition);
        let location = ScreenManager.getLocation(position.getX(), position.getY());
        let gridIndex = position.getY() * 32 + position.getX();
        do am.set(animation);

        return;
    }

    method void moveToPointAnim(Vector2 point, int _anUp, int _anLeft, int _anDown, int _anRight)
    {
        var int minDistance, direction, dist;
        //do Logger.logInt(position.distance(Game.pacManPosition()));

        let minDistance = 1300;

        if (~(lastIndex = (gridIndex - 32)) & checkCollisionUp())
        {
            do position.decY();
            let dist = position.distance(point);
            if (dist < minDistance)
            {
                let minDistance = dist;
                let direction = 1;
            }
            do position.incY();
        }

        if (~(lastIndex = (gridIndex - 1)) & checkCollisionLeft())
        {
            do position.decX();
            let dist = position.distance(point);
            if (dist < minDistance)
            {
                let minDistance = dist;
                let direction = 2;
            }
            do position.incX();
        }

        if (~(lastIndex = (gridIndex + 32)) & checkCollisionDown())
        {
            do position.incY();
            let dist = position.distance(point);
            if (dist < minDistance)
            {
                let minDistance = dist;
                let direction = 3;
            }
            do position.decY();
        }

        if (~(lastIndex = (gridIndex + 1)) & checkCollisionRight())
        {
            do position.incX();
            let dist = position.distance(point);
            if (dist < minDistance)
            {
                let minDistance = dist;
                let direction = 4;
            }
            do position.decX();
        }

        if (direction = 1)
        {
            do moveUp(_anUp);
        }
        else {if (direction = 2)
        {
            do moveLeft(_anLeft);
        }
        else {if (direction = 3)
        {
            do moveDown(_anDown);
        }
        else {if (direction = 4)
        {
            do moveRight(_anRight);
        }}}}

        return;
    }

    method void moveToPoint(Vector2 point)
    {
        do moveToPointAnim(point, anUp, anLeft, anDown, anRight);

        return;
    }

    method void moveToHome()
    {
        do moveToPointAnim(homePosition, anDead, anDead, anDead, anDead);
        return;
    }

    method void frightenedState()
    {   
        var int direction;
        var bool moved;

        let direction = LCGRandom.randRange(1, 4);
        let moved = true;

        while (moved)
        {
            if (direction = 1 & ~(lastIndex = (gridIndex - 32)) & checkCollisionUp())
            {
                do moveUp(anFrightened);
                let moved = false;
            }
            else {if (direction = 2 & ~(lastIndex = (gridIndex - 1)) & checkCollisionLeft())
            {
                do moveLeft(anFrightened);
                let moved = false;
            }
            else {if (direction = 3 & ~(lastIndex = (gridIndex + 32)) & checkCollisionDown())
            {
                do moveDown(anFrightened);
                let moved = false;
            }
            else {if (direction = 4 & ~(lastIndex = (gridIndex + 1)) & checkCollisionRight())
            {
                do moveRight(anFrightened);
                let moved = false;
            }
            else
            {
                let direction = LCGRandom.randRange(1, 4);
            }}}}
        }

        return;
    }

    method void drawNext()
    {
        if (lastLocation > Constants.getScreen() & ~(location = lastLocation))
        {
            //do Logger.logInt(lastLocation);
            if (Game.grid(lastIndex) = 1)
                { do MapAsset.dot(lastLocation); }
            else {if(Game.grid(lastIndex) = 0)
                { do ScreenManager.clearBlock(lastLocation); }
            else {if (Game.grid(lastIndex) = 2)
                { do MapAsset.ability(lastLocation); } 
            else {if (Game.grid(lastIndex) = 5)
                { do MapAsset.genterLeft(lastLocation); }
            else {if (Game.grid(lastIndex) = 6)
                {do MapAsset.genterRight(lastLocation); }
            else {if (Game.grid(lastIndex) = 4)
                { do ScreenManager.clearBlock(lastLocation); }
            else {if (Game.grid(lastIndex) = 3)
                { do ScreenManager.clearBlock(lastLocation); }}}}}}}
        }

        do am.drawNext(location);
        return;
    }
}