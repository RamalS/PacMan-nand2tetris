class Pinky
{
    field int homeState, pacManDirection;
    field AnimationManager am;
    field Vector2 scatterPoint, pointToGo;
    field Ghost ghost;

    constructor Pinky new(int x, int y)
    {
        let homeState = 0;
        let am = AnimationManager.new(6);
        let scatterPoint = Vector2.new(1, 1);
        let pointToGo = Vector2.new(0, 0);
        let pacManDirection = 1;

        do loadAnimations();

        let ghost = Ghost.new(x, y, am);
        do ghost.bindAnimations(Constants.pinkyUp(),
                                Constants.pinkyLeft(),
                                Constants.pinkyDown(),
                                Constants.pinkyRight(),
                                Constants.pinkyFrightened(),
                                Constants.pinkyDead());

        return this;
    }

    method void dispose()
    {
        do am.dispose();
        do scatterPoint.dispose();
        do ghost.dispose();
        do Memory.deAlloc(this);

        return;
    }

    method void loadAnimations()
    {
        var Animation animation;

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.right1());
        do animation.add(PinkyAsset.right2());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.left1());
        do animation.add(PinkyAsset.left2());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.down1());
        do animation.add(PinkyAsset.down2());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.up1());
        do animation.add(PinkyAsset.up2());
        do am.add(animation);

        let animation = Animation.new(1);
        do animation.add(GhostAsset.dead());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(GhostAsset.frightened1());
        do animation.add(GhostAsset.frightened2());
        do am.add(animation);

        do am.set(Constants.pinkyRight());

        return;
    }

    method void reset()
    {
        do ghost.reset();

        return;
    }

    method void resetPosition()
    {
        do ghost.resetPosition(Constants.pinkyRight());
        return;
    }

    method void checkIntersect()
    {
        do ghost.checkIntersect();
        return;
    }

    method void move()
    {
        if (~ghost.isReseted())
        {
            if (ghost.isDead())
                { do ghost.moveToHome(); }
            else {if (Game.isFrightened())
                { do ghost.frightenedState(); }
            else {if (Game.isScatter())
                { do ghost.moveToPoint(scatterPoint); }
            else
            {
                do pointToGo.set(Game.pacManPosition());

                if (~(Game.pacManDirection() = 0))
                    { let pacManDirection = Game.pacManDirection(); }

                if (pacManDirection = 1)
                {
                    do pointToGo.setX(pointToGo.getX() + 4);
                    do ghost.moveToPoint(pointToGo);
                }
                else {if(pacManDirection = -1)
                {
                    do pointToGo.setX(pointToGo.getX() - 4);
                    do ghost.moveToPoint(pointToGo); 
                }
                else {if(pacManDirection = 2)
                {
                    do pointToGo.setY(pointToGo.getY() + 4);
                    do ghost.moveToPoint(pointToGo); 
                }
                else
                {
                    do pointToGo.setY(pointToGo.getY() - 4);
                    do pointToGo.setX(pointToGo.getX() - 4);
                    do ghost.moveToPoint(pointToGo); 
                }}}
            }}}
        }
        else
            { do ghost.setReseted(false); }

        return;
    }

    method void draw()
    {
        do ghost.drawNext();
        return;
    }
}