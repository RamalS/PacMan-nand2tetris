class Pinky
{
    field int homeState;
    field AnimationManager am;
    field Vector2 scatterPoint;
    field Ghost ghost;

    constructor Pinky new(int x, int y)
    {
        let homeState = 0;
        let am = AnimationManager.new(6);
        let scatterPoint = Vector2.new(1, 1);

        do loadAnimations();

        let ghost = Ghost.new(x, y, am);
        do ghost.bindAnimations(Constants.pinkyUp(),
                                Constants.pinkyLeft(),
                                Constants.pinkyDown(),
                                Constants.pinkyRight(),
                                Constants.pinkyFrightened(),
                                Constants.pinkyDead());

        return this;
    }

    method void loadAnimations()
    {
        var Animation animation;

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.right1());
        do animation.add(PinkyAsset.right2());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.left1());
        do animation.add(PinkyAsset.left2());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.down1());
        do animation.add(PinkyAsset.down2());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PinkyAsset.up1());
        do animation.add(PinkyAsset.up2());
        do am.add(animation);

        let animation = Animation.new(1);
        do animation.add(GhostAsset.dead());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(GhostAsset.frightened1());
        do animation.add(GhostAsset.frightened2());
        do am.add(animation);

        do am.set(Constants.pinkyRight());

        return;
    }

    method void exitHome()
    {
        if (homeState = 0)
        {
            do ghost.moveRight(Constants.pinkyRight());
        }
        else {if (homeState = 1)
        {
            do ghost.moveUp(Constants.pinkyUp());
        }
        else {if (homeState = 2)
        {
            do ghost.moveUp(Constants.pinkyUp());
        }}}

        let homeState = homeState + 1;

        return;
    }

    method void move()
    {
        if (homeState = 3)
        {
            do ghost.checkIntersect();

            if (ghost.isDead())
                { do ghost.moveToHome(); }
            else {if (Game.isFrightened())
                { do ghost.frightenedState(); }
            else {if (Game.isScatter())
                { do ghost.moveToPoint(scatterPoint); }
            else
                { do ghost.moveToPoint(Game.pacManPosition()); }}}

            // if (Game.isFrightened())
            //     { do ghost.frightenedState(); }
            // else {if (Game.isScatter())
            //     { do ghost.moveToPoint(scatterPoint); }
            // else {if (ghost.isDead())
            //     { do ghost.moveToHome(); }
            // else
            //     { do ghost.moveToPoint(Game.pacManPosition()); }}}
        }
        else
        {
            do exitHome();
        }
        return;
    }

    method void draw()
    {
        if (ghost.getLastLocation() > Constants.getScreen() & ~(ghost.getLocation() = ghost.getLastLocation()))
        {
            //do Logger.logInt(lastLocation);
            if (Game.grid(ghost.getLastIndex()) = 1)
                { do MapAsset.dot(ghost.getLastLocation()); }
            else {if(Game.grid(ghost.getLastIndex()) = 0)
                { do ScreenManager.clearBlock(ghost.getLastLocation()); }
            else {if (Game.grid(ghost.getLastIndex()) = 2)
                { do MapAsset.ability(ghost.getLastLocation()); } 
            else 
                { do MapAsset.genterLeft(ghost.getLastLocation()); }}}
        }

        do ghost.drawNext();

        return;
    }
}