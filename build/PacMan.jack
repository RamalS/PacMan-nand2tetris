class PacMan
{
    field int lastKey, direction, nextDirection, location, lastLocation, gridIndex;
    field bool updateSprite, reseted;
    field AnimationManager am;
    field Vector2 position, defaultPosition;

    constructor PacMan new(int x, int y)
    {
        let lastKey = 0;
        let direction = 0;
        let nextDirection = 0;
        let updateSprite = true;
        let reseted = false;
        let am = AnimationManager.new(5);
        do setDefaultPosition(x, y);

        do loadAnimations();

        return this;
    }

    method void setDefaultPosition(int x, int y)
    {
        let position = Vector2.new(x, y);
        let defaultPosition = Vector2.new(x, y);
        let location = ScreenManager.getLocation(x, y);
        let gridIndex = y * 32 + x;

        return;
    }

    method void reset()
    {
        var int x, y;

        let x = defaultPosition.getX();
        let y = defaultPosition.getY();

        let lastKey = 0;
        let direction = 0;
        let nextDirection = 0;
        let updateSprite = true;
        let reseted = false;

        do position.set(defaultPosition);
        let location = ScreenManager.getLocation(x, y);
        let lastLocation = location;
        let gridIndex = y * 32 + x;
        
        do am.set(Constants.pacManRight());

        return;
    }

    method void dispose()
    {
        do am.dispose();
        do position.dispose();
        do defaultPosition.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void loadAnimations()
    {
        var Animation animation;

        let animation = Animation.new(2);
        do animation.add(PacManAsset.mouthOpenLeft());
        do animation.add(PacManAsset.mouthClosed());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PacManAsset.mouthOpenRight());
        do animation.add(PacManAsset.mouthClosed());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PacManAsset.mouthOpenUp());
        do animation.add(PacManAsset.mouthClosed());
        do am.add(animation);

        let animation = Animation.new(2);
        do animation.add(PacManAsset.mouthOpenDown());
        do animation.add(PacManAsset.mouthClosed());
        do am.add(animation);

        let animation = Animation.new(11);
        do animation.add(PacManAsset.mouthClosed());
        do animation.add(PacManAsset.death1());
        do animation.add(PacManAsset.death2());
        do animation.add(PacManAsset.death3());
        do animation.add(PacManAsset.death4());
        do animation.add(PacManAsset.death5());
        do animation.add(PacManAsset.death6());
        do animation.add(PacManAsset.death7());
        do animation.add(PacManAsset.death8());
        do animation.add(PacManAsset.death9());
        do animation.add(PacManAsset.death10());
        do am.add(animation);

        do am.set(Constants.pacManRight());

        return;
    }

    method Vector2 getPosition() { return position; }
    method int getLocation() { return location; }
    method int getGridIndex() { return gridIndex; }
    method int getDirection() { return direction; }

    // promjeni da su prva 3 prazno, dot i ability
    method bool checkCollisionUp()    { if (Game.grid(gridIndex - 32) < 5) {return true;} else {return false;}}
    method bool checkCollisionDown()  { if (Game.grid(gridIndex + 32) < 5) {return true;} else {return false;}}
    method bool checkCollisionLeft()  { if (Game.grid(gridIndex - 1) < 5)  {return true;} else {return false;}}
    method bool checkCollisionRight() { if (Game.grid(gridIndex + 1) < 5)  {return true;} else {return false;}}

    method void moveInit()
    {
        let updateSprite = true;
        let lastLocation = location;

        if (Game.grid(gridIndex) = 2)
        {
            do Game.setFrightened(); 
            do Game.setGrid(gridIndex, 0);
        }

        return;
    }

    method void moveStop()
    {
        let direction = 0;
        //let updateSprite = false;

        return;
    }

    method void moveRight()
    {
        if (Game.grid(gridIndex) = 3)
        {
            do ScreenManager.clearBlock(location);
            let location = location - 31;
            let gridIndex = gridIndex - 31;
            do position.setX(position.getX() - 31);
        }

        if (checkCollisionRight())
        {
            do moveInit();
            let location = location + 1;
            let gridIndex = gridIndex + 1;
            do position.incX();
            do am.set(Constants.pacManRight());
        }
        else { do moveStop(); }

        return;
    }

    method void moveLeft()
    {
        if (Game.grid(gridIndex) = 3)
        {
            do ScreenManager.clearBlock(location);
            let location = location + 31;
            let gridIndex = gridIndex + 31;
            do position.setX(position.getX() + 31);
        }

        if (checkCollisionLeft())
        {
            do moveInit();
            let location = location - 1;
            let gridIndex = gridIndex - 1;
            do position.decX();
            do am.set(Constants.pacManLeft());
        }
        else { do moveStop(); }

        return;
    }

    method void moveUp()
    {
        if (checkCollisionUp())
        {
            do moveInit();
            let location = location - 512;
            let gridIndex = gridIndex - 32;
            do position.decY();
            do am.set(Constants.pacManUp());
        }
        else { do moveStop(); }
        
        return;
    }

    method void moveDown()
    {
        if (checkCollisionDown())
        {
            do moveInit();
            let location = location + 512;
            let gridIndex = gridIndex + 32;
            do position.incY();
            do am.set(Constants.pacManDown());
        }
        else { do moveStop(); }
        
        return;
    }

    method void resetPosition()
    {
        do moveInit();
        do position.set(defaultPosition);
        let location = ScreenManager.getLocation(position.getX(), position.getY());
        let gridIndex = position.getY() * 32 + position.getX();
        do am.set(Constants.pacManDead());
        let reseted = true;
        let direction = 0;
        let nextDirection = 0;

        return;
    }

    method void input()
    {
        var int kybrd;
        
        let kybrd = Keyboard.keyPressed();
        // do Logger.logInt(kybrd); 

        if ((kybrd = 130) & ~(lastKey = kybrd))
        {
            let nextDirection = -1;
            let lastKey = kybrd;
            do Game.setSeed(); 
        } 
        else {if (kybrd = 132 & ~(lastKey = kybrd))
        {
            let nextDirection = 1;
            let lastKey = kybrd;
        }
        else {if ((kybrd = 131) & ~(lastKey = kybrd))
        {
            let nextDirection = -2;
            let lastKey = kybrd;
        } 
        else {if (kybrd = 133 & ~(lastKey = kybrd))
        {
            let nextDirection = 2;
            let lastKey = kybrd;
        }
        else {if (kybrd = 0 & ~(lastKey = kybrd))
        {
            let lastKey = kybrd;
        }}}}}
          
        return;
    }

    method void move()
    {
        if (~(direction = nextDirection))
        {
            if ((nextDirection = 1  & checkCollisionRight()) | 
                (nextDirection = -1 & checkCollisionLeft())  |
                (nextDirection = 2  & checkCollisionDown())  |
                (nextDirection = -2 & checkCollisionUp()))
            {
                let direction = nextDirection;
            }
        }
        
        if (direction = 1)
            { do moveRight(); }
        else {if (direction = -1)
            { do moveLeft(); }
        else {if (direction = 2)
            { do moveDown(); }
        else {if (direction = -2)
            { do moveUp(); }}}}

        if (Game.grid(gridIndex) = 1) 
            { do Game.increaseScore(gridIndex, 1); }

        return;
    }

    method void draw()
    {
        if (lastLocation > Constants.getScreen() & ~(location = lastLocation))
        {
            //do Logger.logInt(lastLocation);
            do ScreenManager.clearBlock(lastLocation);
        }

        if (updateSprite)
        {
            if (reseted)
            {
                do am.setKeyFrame(Constants.pacManDead(), 0);
                while (am.drawNext(location) = false)
                    { do Sys.wait(200); }
                let reseted = false;
                do am.setKeyFrame(Constants.pacManLeft(), 0);
            } 
            else
                { do am.drawNext(location); }
        }

        return; 
    }
}
