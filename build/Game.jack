class Game
{
    static bool run;
    static int scatterState;

    static int score, hp, factor;
    static bool scatter, frightened;
    static PacMan pacMan;
    static Pinky pinky;
    static Array map;

    function void init()
    {
        let map = ClassicMap.initMap();
        let pacMan = PacMan.new(2, 8);
        let pinky = Pinky.new(15,7);

        return;
    }

    function void reset()
    {
        do Memory.deAlloc(map);

        let map = ClassicMap.initMap();
        let run = true;
        let scatter = true;
        let frightened = false;
        let score = 0;
        let hp = 1;
        let scatterState = 0;

        do pinky.reset();
        do pacMan.reset();
        do ClassicMap.draw();

        do Output.moveCursor(0, 2);
        do Output.printString("Score: ");
        do Output.printInt(score);

        do Output.moveCursor(0, 13);
        do Output.printString("Lives: ");
        do Output.printInt(hp);

        return;
    }

    function void dispose()
    {
        do pacMan.dispose();
        do pinky.dispose();
        do Memory.deAlloc(map);

        return;
    }

    function void setRun(bool _run)
    {
        let run = _run;

        return;
    }

    function void setSeed()
    {
        do LCGRandom.setSeed(factor);

        return;
    }

    function void increaseScore(int index, int x)
    {
        let score = score + x;
        do Game.setGrid(index, 0);
        do Output.moveCursor(0, 2);
        do Output.printString("Score: ");
        do Output.printInt(score);

        return;
    }

    function void decHP()
    {
        let hp = hp - 1;
        do pacMan.resetPosition();
        do pinky.resetPosition();
        do Output.moveCursor(0, 13);
        do Output.printString("Lives: ");
        do Output.printInt(hp);
       
        return;
    }

    function int getHp() { return hp; }

    function int grid(int i)
    {
        var int x;
        let x = map[i];

        return x;
    }

    function void setGrid(int i, int x)
    {
        let map[i] = x;

        return;
    }

    function Vector2 pacManPosition()
    {
        return pacMan.getPosition();
    }

    function int pacManLocation()
    {
        return pacMan.getLocation();
    }

    function int pacManGridIndex()
    {
        return pacMan.getGridIndex();
    }

    function bool isScatter()
    {
        return scatter;
    }

    function void setFrightened()
    {
        let frightened = true;

        return;
    }

    function bool isFrightened()
    {
        return frightened;
    }

    function void loop()
    {
        var int drawDuration, moveDuration, scatterDuration, frightenedDuration;

        let drawDuration = 10;
        let moveDuration = 10;
        let scatterDuration = 2000;
        let frightenedDuration = 2000;
        do LCGRandom.setSeed(1234);

        while (run)
        {
            if (moveDuration < 0)
            {
                do pinky.move();
                do pacMan.move();
                let moveDuration = 40;
            }

            if (drawDuration < 0)
            {
                do pacMan.draw();
                do pinky.draw();
                let drawDuration = 20;
            }

            if (frightened)
            {
                if (frightenedDuration < 0)
                {
                    let frightenedDuration = 2000;
                    let frightened = false;
                }

                let frightenedDuration = frightenedDuration - 1;
            }
            else
            {
                let scatterDuration = scatterDuration - 1;
            }

            if (scatterDuration < 0)
            {
                if (scatterState < 7)
                {
                    let scatter = ~scatter;
                    let scatterDuration = 2000;
                    let scatterState = scatterState + 1;
                }
            }

            do pacMan.input();

            let drawDuration = drawDuration - 1;
            let moveDuration = moveDuration - 1;
            let factor = 80;

            while(factor > 0) {
                let factor = factor - 1;
            }
        }

        return;
    }
}